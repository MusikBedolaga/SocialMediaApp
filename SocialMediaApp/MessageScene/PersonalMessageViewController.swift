//
//  PersonalMessageViewController.swift
//  SocialMediaApp
//
//  Created by –ú—É—Å–∞ –ó–∞—Ä–∏—Ñ—è–Ω–æ–≤ on 26.02.2025.
//

import UIKit
import CoreData

class PersonalMessageViewController: UIViewController {
    
    private lazy var personalMessageView = PersonalMessageView(delegate: self)
    
    private lazy var personalMessageViewModel = PersonalMessageViewModel(delegate: self, conversation: currentConversation!)
    
    private lazy var frc = personalMessageViewModel.fetchController
    
    private let coreDataManager = CoreDataManager.defaultConfig
    
    public var currentConversation: Conversation?
    
    override func viewWillAppear(_ animated: Bool) {
        personalMessageView.personalMessageCollectionView.reloadData()
        personalMessageView.personalMessageCollectionView.layoutIfNeeded()
    }

    override func viewDidLoad() {
        super.viewDidLoad()
        setupView()
        
    }
    
    private func setupView() {
        navigationItem.hidesBackButton = true
        view = personalMessageView
        personalMessageView.setupPersonalMessageCollection(delegate: self, dataSource: self)
        
        guard let conversation = currentConversation else { return }
        let receiver = conversation.user1 == personalMessageViewModel.currentUser ? conversation.user2 : conversation.user1
        personalMessageView.setupIndorationView(userImage: nil, userName: receiver?.name)
    }
    
    private func getCurrentOutputText() -> String {
        let text = personalMessageView.outputMessageView.contentTextField.text!
        return text
    }
    
    private func scrollToLastMessage() {
        guard let messages = frc?.fetchedObjects, !messages.isEmpty else { return }
        let lastIndexPath = IndexPath(item: messages.count - 1, section: 0)
        
        personalMessageView.personalMessageCollectionView.scrollToItem(at: lastIndexPath, at: .bottom, animated: true)
    }
    
    private func calculateHeightForText(_ text: String, width: CGFloat) -> CGFloat {
        let label = UILabel()
        label.text = text
        label.numberOfLines = 0
        label.font = UIFont.systemFont(ofSize: 16)
        label.frame = CGRect(x: 0, y: 0, width: width, height: .greatestFiniteMagnitude)
        label.sizeToFit()
        return label.frame.height
    }
}

//MARK: - OutputMessageViewDelegate
extension PersonalMessageViewController: PersonalMessageDelegate {
    func pushMessage() {
        guard let conversation = currentConversation,
              let sender = personalMessageViewModel.currentUser,
              let receiver = (conversation.user1 == sender ? conversation.user2 : conversation.user1)
        else {
            print("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞")
            return
        }

        coreDataManager.addNewMessage(content: getCurrentOutputText(), conversation: conversation, sender: sender, receiver: receiver)

        DispatchQueue.main.asyncAfter(deadline: .now() + 0.2) {
                do {
                    try self.frc?.performFetch()
                    print("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π performFetch() –≤—ã–ø–æ–ª–Ω–µ–Ω, –Ω–∞–π–¥–µ–Ω–æ \(self.frc?.fetchedObjects?.count ?? 0) —Å–æ–æ–±—â–µ–Ω–∏–π")
                    self.personalMessageView.personalMessageCollectionView.reloadData()
                } catch {
                    print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: \(error.localizedDescription)")
                }
            }
        
        self.personalMessageView.outputMessageView.contentTextField.text = ""
        
        coreDataManager.saveContext()
    }
    
    func goBack() {
        navigationController?.popViewController(animated: true)
    }
}

//MARK: - UICollectionViewDataSource
extension PersonalMessageViewController: UICollectionViewDataSource {
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        personalMessageViewModel.fetchController?.fetchedObjects?.count ?? 0
        
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let cell = personalMessageView.personalMessageCollectionView.dequeueReusableCell(withReuseIdentifier: PersonalMessageCollectionViewCell.identifier, for: indexPath) as! PersonalMessageCollectionViewCell
        
        guard let message = frc?.object(at: indexPath) else { return cell}
        let isOutgoing = message.sender == personalMessageViewModel.currentUser
        cell.configure(with: message.content!, isOutgoing: isOutgoing)
        
        return cell
    }
}

//MARK: - UICollectionViewDataSource
extension PersonalMessageViewController: UICollectionViewDelegateFlowLayout {
    var sideInsert: CGFloat { return 5 }
    var sideBetween: CGFloat { return 3 }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        
        let message = frc?.object(at: indexPath).content
        let maxWidth = collectionView.frame.width - 32
        let hight = calculateHeightForText(message!, width: maxWidth)
        
        return CGSize(width: collectionView.frame.width - 20, height: max(50, hight))
    }

    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumLineSpacingForSectionAt section: Int) -> CGFloat {
        sideBetween
    }
}


extension PersonalMessageViewController: NSFetchedResultsControllerDelegate {
    func controllerWillChangeContent(_ controller: NSFetchedResultsController<NSFetchRequestResult>) {
        // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é
        personalMessageView.personalMessageCollectionView.performBatchUpdates(nil, completion: nil)
    }

    func controllerDidChangeContent(_ controller: NSFetchedResultsController<NSFetchRequestResult>) {
        
        guard let messages = frc?.fetchedObjects, !messages.isEmpty else { return }
        
        let lastIndex = messages.count - 1
        let indexPath = IndexPath(item: lastIndex, section: 0)
        
        DispatchQueue.main.async {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
            let currentCount = self.personalMessageView.personalMessageCollectionView.numberOfItems(inSection: 0)
            
            // –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ —É–≤–µ–ª–∏—á–∏–ª–æ—Å—å (—Ç.–µ. –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç)
            if currentCount < messages.count {
                // –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç, –µ—Å–ª–∏ –∏–Ω–¥–µ–∫—Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
                self.personalMessageView.personalMessageCollectionView.performBatchUpdates({
                    self.personalMessageView.personalMessageCollectionView.insertItems(at: [indexPath])
                }, completion: { _ in
                    // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
                    self.scrollToLastMessage()
                })
            } else {
                // –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å—é –∫–æ–ª–ª–µ–∫—Ü–∏—é
                self.personalMessageView.personalMessageCollectionView.reloadData()
                print("–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—è, –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –±—ã–ª–æ.")
            }
        }
    }
}

